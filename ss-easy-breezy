#!/bin/bash
#
# https://github.com/jinndi/wg-easy-breezy
#
# Copyright (c) 2025 Jinndi <alncores@gmail.ru>
#
# Released under the MIT License, see the accompanying file LICENSE
# or https://opensource.org/licenses/MIT

export DEBIAN_FRONTEND=noninteractive
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

## Version of Shadowsocks-rust used
# https://github.com/shadowsocks/shadowsocks-rust/releases/
version="v1.23.4"

## File paths:
path_shadowsocks_rust="/opt/shadowsocks-rust"
path_ssserver="$path_shadowsocks_rust/ssserver"
path_ssservice="$path_shadowsocks_rust/ssservice"
path_ssurl="$path_shadowsocks_rust/ssurl"
path_translation_file="$path_shadowsocks_rust/translation"
path_service="/etc/systemd/system/ssserver.service"
path_config="$path_shadowsocks_rust/config.json"
path_client_for_url_config="$path_shadowsocks_rust/config_url_link.json"
path_sysctl_config="/etc/sysctl.d/99-ss-easy-breezy.conf"
path_script="$path_shadowsocks_rust/ss-easy-breezy"
path_script_link="/usr/bin/sseb"

## Cipher, the following are supported in order to increase the load on the processor:
# -- chacha20-ietf-poly1305
# -- aes-128-gcm
# -- aes-256-gcm
encrypt_method="chacha20-ietf-poly1305"

show_header() {
echo -e "\033[1;35m"
cat <<EOF
###################################################
#                  SS-EASY-BREEZY                 #
# GitHub:https://github.com/jinndi/wg-easy-breezy #
###################################################
EOF
echo -e "\033[0m"
}

echomsg() {
  if [ -n "$2" ]; then
    echo
  fi
  
  echo -e "\033[1;34m$1\033[0m"
}

echook() {
  echo -e "\033[1;32m$1\033[0m"
}

echoerr () {
  echo -e "\033[1;31m$1\033[0m"
}

exiterr() {
  echo -e "\033[1;31m${W_ERROR}: $1\033[0m" >&2
  exit 1
}
 
load_translation() {
  if [ ! -f "$path_translation_file" ]; then
    echo -e "\nSelect language\n 1) English\n 2) Русский"

    read -rp "Option: " option

    until [[ "$option" =~ ^[1-2]$ ]]; do
      echoerr "Incorrect option"
      read -rp "Option: " option
    done

    local translation
    case "$option" in
      1)
        translation="en"
      ;;
      2)
        translation="ru"
      ;;
      *)
        translation="en"
      ;;
    esac

    mkdir -p "$(dirname "$path_translation_file")"
    touch "$path_translation_file"
    
    (
      set -e
      curl -fsSL -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
        "https://raw.githubusercontent.com/jinndi/wg-easy-breezy/main/locales/general/$translation" \
        -o "$path_translation_file"
      curl -fsSL -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
        "https://raw.githubusercontent.com/jinndi/wg-easy-breezy/main/locales/ss-easy-breezy/$translation" \
        >> "$path_translation_file"
    ) || exiterr "Error: 'curl translation'"
  fi

  source "$path_translation_file"
}

check_root() {
  if [ "$(id -u)" != 0 ]; then
    exiterr "$W_ERROR_ROOT 'sudo bash $0'"
  fi
}

check_shell() {
  if readlink /proc/$$/exe | grep -q "dash"; then
    exiterr "$W_ERROR_BASH"
  fi
}

check_os() {
  if grep -qs "ubuntu" /etc/os-release; then
    os="ubuntu"
    os_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '"' -f 2 | tr -d '.')
  elif [[ -e /etc/debian_version ]]; then
    os="debian"
    os_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)
  else
    exiterr "$W_ERROR_DIST"
  fi
}

check_os_ver() {
  if [[ "$os" == "ubuntu" && "$os_version" -lt 2404 ]]; then
    exiterr "$W_ERROR_DIST_UBUNTU"
  fi
  if [[ "$os" == "debian" && "$os_version" -lt 12 ]]; then
    exiterr "$W_ERROR_DIST_DEBIAN"
  fi
}

check_kernel() {
  if [[ $(uname -r | cut -d "." -f 1) -lt 6 ]]; then
     exiterr "$W_ERROR_KERNEL"
  fi
}

check_container() {
  if systemd-detect-virt -cq 2>/dev/null; then
    exiterr "$W_ERROR_CONTAINER"
  fi
}

check_port() {
  if ! [[ "$1" =~ ^[0-9]+$ ]]; then
    echoerr "$W_PORT_MUST_NUMBER"
    return 1
  fi

  if [ "$1" -lt 49152 ] || [ "$1" -gt 65535 ]; then
    echoerr "$W_PORT_SHOULD_RANGE"
    return 1
  fi

  if lsof -i :"$1" >/dev/null ; then
    echoerr "$W_PORT_BUSY"
    return 1
  fi

  return 0
}

check_IPv4() {
  if [[ ! "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    echoerr "$W_INCORRECT_FORMAT_IPV4"
    return 1
  fi

  IFS='.' read -r -a octets <<< "$1"
  for octet in "${octets[@]}"; do
    if [[ "$octet" != "0" && "$octet" =~ ^0 ]]; then
      echoerr "$W_INCORRECT_OCTET_IPV4"
      return 1
    fi

    dec_octet=$((10#$octet))
    if ((dec_octet < 0 || dec_octet > 255)); then
      echoerr "$W_WRONG_RANGE_OCTET_IPV4"
      return 1
    fi
  done

  return 0
}

show_spinner() {
  local pid=$1
  local delay=0.1
  local spinner="|/-\\"
  tput civis

  while kill -0 "$pid" 2>/dev/null; do
    for i in $(seq 0 3); do
      printf "\r[%c] $W_PERFORM_WAIT" "${spinner:$i:1}"
      sleep "$delay"
    done
  done

  wait "$pid"
  local status=$?
  tput cnorm
  echo
  return $status
}

wait_for_apt_unlock() {
  local timeout=300
  local waited=0

  while pgrep -x apt >/dev/null || pgrep -x apt-get >/dev/null || pgrep -x dpkg >/dev/null; do
    sleep 1
    [ "$waited" = 0 ] && echomsg "$W_APT_WAITING" 1
    ((waited++))
    if (( waited >= timeout )); then
      exiterr "$W_EXCEEDING_WAIT_TIME ($timeout сек)."
      return 1
    fi
  done
}

install_pkgs() {
  wait_for_apt_unlock

  echomsg "$W_PKG_UPDATING_AND_ISTALL_DEPENDC" 1
  (
    (
      dpkg --configure -a || dpkg --configure -a
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'dpkg --configure -a'"
    (
      apt-get -yqq update || apt-get -yqq update
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'apt-get update'"
    (
      apt-get -yqq upgrade || apt-get -yqq upgrade
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'apt-get upgrade'"
    (
      apt-get -yqq install iproute2 iptables curl tar xz-utils lsof dnsutils grep nano htop \
      || apt-get -yqq install iproute2 iptables curl tar xz-utils lsof dnsutils grep nano htop
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'apt-get install'"
  ) & show_spinner $!
}

download_shadowsocks_rust() {
  echomsg "$W_DOWNLOAD shadowsocks-rust $version" 1

  mkdir -p "$path_shadowsocks_rust"

  (
    set -e
    curl -fsSLO -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
      "https://github.com/shadowsocks/shadowsocks-rust/releases/download/${version}/shadowsocks-${version}.x86_64-unknown-linux-gnu.tar.xz" && \
    tar -xf "shadowsocks-${version}.x86_64-unknown-linux-gnu.tar.xz" -C "$path_shadowsocks_rust/" && \
    rm -r "shadowsocks-${version}.x86_64-unknown-linux-gnu.tar.xz"
  ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'curl shadowsocks-rust'"
}

create_sysctl_config () {
  echomsg "$W_CREATING_NETWORK_SETTINGS" 1

  mkdir -p "$(dirname "$path_sysctl_config")"

  link_sysctl_config="https://raw.githubusercontent.com/jinndi/wg-easy-breezy/main/sysctl.conf"
  curl -fsSL -H "Cache-Control: no-cache" -H "Pragma: no-cache" "$link_sysctl_config" \
      -o "$path_sysctl_config" > /dev/null 2>&1 || exiterr "${W_ERROR}: 'curl sysctl.conf'"

  if modprobe -q tcp_bbr && [ -f /proc/sys/net/ipv4/tcp_congestion_control ]
  then
    echo "net.core.default_qdisc = fq" >> "$path_sysctl_config"
    echo "net.ipv4.tcp_congestion_control = bbr" >> "$path_sysctl_config"
  else
    if modprobe -q tcp_hybla && [ -f /proc/sys/net/ipv4/tcp_congestion_control ]
    then
      echo "net.ipv4.tcp_congestion_control = hybla" >> "$path_sysctl_config"
    fi
  fi

  sysctl -e -q -p "$path_sysctl_config"
}

input_port() {
  while true; do
    echomsg "$W_INPUT_PORT" 1
    read -rp " > " port
    if check_port "$port"; then
      break
    fi
  done
}

create_config() {
  local password public_ip

  echomsg "$W_CREATE_CONFIG" 1
  mkdir -p "$(dirname "$path_config")"
  password=$($path_ssservice genkey -m "$encrypt_method")

  {
    echo "{"
    echo "  \"server\": \"::\","
    echo "  \"server_port\": $port,"
    echo "  \"mode\": \"tcp_and_udp\","
    echo "  \"method\": \"$encrypt_method\","
    echo "  \"password\": \"$password\","
    echo "  \"keep_alive\": 25,"
    echo "  \"timeout\": 300,"
    echo "  \"udp_timeout\": 300,"
    echo "  \"udp_max_associations\": 512,"
    echo "  \"nofile\": 51200,"
    echo "  \"fast_open\": true,"
    echo "  \"no_delay\": true"
    echo "}"
  } > "$path_config"

  public_ip=$(ip route get 1.1.1.1 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i=="src") print $(i+1)}')

  [ -z "$public_ip" ] && command -v dig >/dev/null && \
    public_ip=$(dig +short -4 myip.opendns.com @resolver1.opendns.com)

  if [[ ! "$public_ip" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    public_ip=""
    echoerr "$W_FAILED_DETERMINE_PUBLIC_IP"
    while true; do
      echomsg "$W_ENTER_IPV4_THIS_SERVER" 1
      read -rp " > " public_ip

      if check_IPv4 "$public_ip"; then
        break
      fi
    done
  fi

  {
    echo "{"
    echo "  \"server\": \"$public_ip\","
    echo "  \"server_port\": $port,"
    echo "  \"method\": \"$encrypt_method\","
    echo "  \"password\": \"$password\""
    echo "}"
  } > "$path_client_for_url_config"
}

create_service() {
  echomsg "$W_CREATING_SYSTEMD_SERVICE" 1

  # Путь к iptables
  local iptables_path
  iptables_path=$(command -v iptables)
  if [[ $(systemd-detect-virt) == "openvz" ]] && \
    readlink -f "$(command -v iptables)" | grep -q "nft" && \
    hash iptables-legacy 2>/dev/null
  then
    iptables_path=$(command -v iptables-legacy)
  fi

  {
    echo "[Unit]"
    echo "Description=Shadowsocks-rust ssserver"
    echo "Documentation=https://github.com/shadowsocks/shadowsocks/wiki"
    echo "After=network.target"
    echo "Wants=network.target"
    echo
    echo "[Service]"
    echo "PermissionsStartOnly=true"
    echo "ExecStartPre=${iptables_path} -I INPUT -p tcp --dport ${port} -j ACCEPT"
    echo "ExecStartPre=${iptables_path} -I INPUT -p udp --dport ${port} -j ACCEPT"
    echo "ExecStart=${path_ssserver} -c ${path_config}"
    echo "ExecStopPost=${iptables_path} -D INPUT -p tcp --dport ${port} -j ACCEPT"
    echo "ExecStopPost=${iptables_path} -D INPUT -p udp --dport ${port} -j ACCEPT"
    echo "Restart=on-failure"
    echo "User=shadowsocks"
    echo "LimitNOFILE=51200"
    echo "CapabilityBoundingSet=CAP_NET_BIND_SERVICE"
    echo "AmbientCapabilities=CAP_NET_BIND_SERVICE"
    echo "NoNewPrivileges=true"
    echo
    echo "[Install]"
    echo "WantedBy=multi-user.target"
  } > "$path_service"
}

add_user() {
  echomsg "$W_ADD_USER 'shadowsocks'" 1
  useradd --system --home-dir /nonexistent --no-create-home \
  --shell /usr/sbin/nologin shadowsocks >/dev/null 2>&1 \
  || exiterr "${W_ERROR}: 'useradd shadowsocks'"
}

activate_ssserver() {
  echomsg "$W_LAUNCH_SERVICE" 1
  systemctl daemon-reload >/dev/null 2>&1
  systemctl enable --now ssserver >/dev/null 2>&1
  if systemctl is-active --quiet ssserver; then
    echook "$W_SERVICE_SUCCESS_LAUNCH"
  else
    echoerr "$W_LAUNCH_SERVICE_FAILED"
  fi
}

press_any_side_to_open_menu() {
  echomsg "------------------------------------------------"
  read -n1 -r -p "$W_PRESS_ANY_KEY_TO_OPEN_MENU"
  select_menu_option
}

switch_active_service() {
  systemctl daemon-reload >/dev/null 2>&1
  if systemctl is-active --quiet ssserver; then
    echomsg "$W_STOP_SERVICE" 1
    { systemctl stop ssserver && systemctl disable ssserver; } >/dev/null 2>&1
    if systemctl is-active --quiet ssserver; then
      echoerr "$W_SERVICE_STOP_FAILED"
    else
      echook "$W_SERVICE_SUCCESS_STOPPED"
    fi
  else
    echomsg "$W_LAUNCH_SERVICE" 1
    systemctl enable --now ssserver >/dev/null 2>&1
    if systemctl is-active --quiet ssserver; then
      echook "$W_SERVICE_SUCCESS_LAUNCH"
    else
      echoerr "$W_LAUNCH_SERVICE_FAILED"
    fi
  fi
  press_any_side_to_open_menu
}

reload_service() {
  echomsg "$W_RESTART_SERVICE" 1
  systemctl daemon-reload >/dev/null 2>&1
  systemctl reload ssserver >/dev/null 2>&1
  if systemctl is-active --quiet ssserver; then
    echook "$W_SERVICE_SUCCESS_RESTARTED"
  else
    echoerr "$W_ERROR_RESTART_SERVICE"
  fi
  press_any_side_to_open_menu
}

show_connect_link() {
  echo -e "\n$W_LINK_CONNECTION:"
  echo -e "\033[0;36m$("$path_ssurl" --encode "$path_client_for_url_config")\033[0m"
  press_any_side_to_open_menu
}

show_systemctl_status() {
  systemctl status ssserver --no-pager -l
  press_any_side_to_open_menu
}

show_journalctl_log() {
  journalctl -u ssserver -n 50 --no-pager
  press_any_side_to_open_menu
}

remove_shadowsocks_rust() {
  (
    systemctl stop ssserver
    systemctl disable ssserver
    rm -f "$path_config"
    rm -f "$path_service"
    rm -f "$path_sysctl_config" 
    rm -f "$path_script"
    rm -f "$path_script_link" 
    rm -rf "$path_shadowsocks_rust"
    systemctl daemon-reload
    userdel shadowsocks
  ) >/dev/null 2>&1
}

accept_remove_shadowsocks_rust() {
  echo
  read -rp "$W_DELETE_APP [y/N]: " remove
  until [[ "$remove" =~ ^[yYnNдДнН]*$ ]]; do
    echo "$W_INCORRECT_OPTION"
    read -rp "$W_DELETE_APP [y/N]: " remove
  done

  if [[ "$remove" =~ ^[yYдД]$ ]]; then
    echomsg "$W_DELETE_PROGRAM" 1
    remove_shadowsocks_rust
    echook "$W_DELETE_PROGRAM_OK"
    exit 0
  else
    select_menu_option
  fi
}

install_ssserver() {
  clear
  check_root
  check_shell
  check_kernel
  check_os
  check_os_ver
  check_container
  show_header
  read -n1 -r -p "$W_PRESS_ANY_KEY_TO_INSTALL"

  if [[ -f "$path_translation_file" ]]; then
    cp "$path_translation_file" /opt/.translation.tmp
  fi
  remove_shadowsocks_rust
  if [[ -f "/opt/.translation.tmp" ]]; then
    mkdir -p "$(dirname "$path_translation_file")"
    mv /opt/.translation.tmp "$path_translation_file"
  fi

  install_pkgs
  input_port
  download_shadowsocks_rust
  create_config
  create_service
  add_user
  create_sysctl_config
  activate_ssserver

  mv "$(realpath "$0")" "$path_script"
  chmod +x "$path_script"
  ln -s "$path_script" "$path_script_link"

  echo -e "\n\033[1;32m$W_INSTALL_COMPLETED\033[0m"
  show_connect_link
}

select_menu_option() {
  clear
  local menu
  menu+="shadowsocks-rust server $version\n"

  show_header
  if systemctl is-active --quiet ssserver; then
    menu+="$W_ACTIVE_SERVICE\n"
    menu+="$W_SELECT_OPTION\n"
    menu+="$W_STOP\n"
  else
    menu+="$W_SERVICE_NOT_ACTIVE\n"
    menu+="$W_SELECT_OPTION\n"
    menu+="$W_LAUNCH\n"
  fi

  menu+="$W_MAIN_MENU"
  
  echo -e "$menu"

  read -rp "$W_CHOICE: " option
  until [[ "$option" =~ ^[1-7]$ ]]; do
    echoerr "$W_INCORRECT_OPTION"
    read -rp "$W_CHOICE: " option
  done

  [[ "$option" =~ ^[1-7]$ ]] && clear

  case "$option" in
    1)
      switch_active_service
    ;;
    2)
      reload_service
    ;;
    3)
      show_systemctl_status
    ;;
    4)
      show_connect_link
    ;;
    5)
      show_journalctl_log
    ;;
    6)
      accept_remove_shadowsocks_rust
    ;;
    7)
      exit 0
    ;;
  esac
}

load_translation

if [[ -f "$path_script" ]]; then
  select_menu_option
else
  install_ssserver
fi