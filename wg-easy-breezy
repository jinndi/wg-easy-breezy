#!/bin/bash
#
# https://github.com/jinndi/wg-easy-breezy
#
# Copyright (c) 2025 Jinndi <alncores@gmail.ru>
#
# Released under the MIT License, see the accompanying file LICENSE
# or https://opensource.org/licenses/MIT

export DEBIAN_FRONTEND=noninteractive
export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

## Paths:
path_data_dir="/opt/wg-easy-breezy"
path_script="$path_data_dir/wg-easy-breezy"
path_script_link="/usr/bin/wgeb"
path_translation_file="$path_data_dir/translation"
path_docker_compose_file="$path_data_dir/services.yml"
path_env_file="$path_data_dir/.env"
path_systemd_unit_file="/etc/systemd/system/wg-easy-breezy.service"
path_caddyfile="$path_data_dir/Caddyfile"
path_iptables_apply_script="$path_data_dir/iptables/apply.sh"
path_iptables_delete_script="$path_data_dir/iptables/delete.sh"
path_sysctl_config="$path_data_dir/sysctl.conf"
path_sysctl_config_link="/etc/sysctl.d/99-wg-easy-breezy.conf"
path_xray_configs_dir="$path_data_dir/xray"
path_uv_dir="$path_data_dir/astral"
path_uv_env_file="$path_uv_dir/.env"
path_uvx="$path_uv_dir/uvx"

## Links to podman images:
wg_easy_image="ghcr.io/jinndi/wg-easy-breezy:latest"
xray_image="docker.io/teddysun/xray:latest"
caddy_image="docker.io/library/caddy:2.10-alpine"

## Prefix for podman service names, networks, volumes, web interface URLs
service_prefix="wgeb"

## Declaration of variables defined during the script execution:
service_tag=""
host=""
email=""
xray_ip=""
xray_config=""
port_ui=""
port_wg=""
address=""
link_ui=""
is_domain=""
install_mode=""

load_env() {
  if [ -f "$path_env_file" ]; then
    set -o allexport
    # shellcheck source=/dev/null
    source "$path_env_file"
    set +o allexport
  fi
}

load_uv_env() {
  if [ -f "$path_uv_env_file" ]; then
    set -o allexport
    # shellcheck source=/dev/null
    source "$path_uv_env_file"
    set +o allexport
  fi
}

show_header() {
echo -e "\033[1;35m"
cat <<EOF
###################################################
#                 WG-EASY-BREEZY v7               #
# GitHub:https://github.com/jinndi/wg-easy-breezy #
###################################################
EOF
echo -e "\033[0m"
}

echomsg() {
  if [ -n "$2" ]; then
    echo
  fi
  echo -e "\033[1;34m$1\033[0m"
}

echook() {
  echo -e "\033[1;32m$1\033[0m"
}

echoerr () {
  echo -e "\033[1;31m$1\033[0m"
}

exiterr() {
  echo -e "\033[1;31m${W_ERROR}: $1\033[0m" >&2
  exit 1
}

load_translation() {
  if [ ! -f "$path_translation_file" ]; then
    echo -e "\nSelect language\n 1) English\n 2) Русский"

    read -rp "Option: " option

    until [[ "$option" =~ ^[1-2]$ ]]; do
      echoerr "Incorrect option"
      read -rp "Option: " option
    done

    local translation
    case "$option" in
      1)
        translation="en"
      ;;
      2)
        translation="ru"
      ;;
      *)
        translation="en"
      ;;
    esac

    mkdir -p "$(dirname "$path_translation_file")"
    touch "$path_translation_file"
    
    (
      curl -fsSL -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
        "https://raw.githubusercontent.com/jinndi/wg-easy-breezy/main/locales/general/$translation" \
        -o "$path_translation_file"
      curl -fsSL -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
        "https://raw.githubusercontent.com/jinndi/wg-easy-breezy/main/locales/wg-easy-breezy/$translation" \
        >> "$path_translation_file"
    ) || exiterr "Error: 'curl translation'"

    mkdir -p "$(dirname "$path_env_file")"
    echo "LANG=$translation" > "$path_env_file"
  fi
  # shellcheck source=/dev/null
  source "$path_translation_file"
}

check_root() {
  if [ "$(id -u)" != 0 ]; then
    exiterr "$W_ERROR_ROOT 'sudo bash $0'"
  fi
}

check_shell() {
  if readlink /proc/$$/exe | grep -q "dash"; then
    exiterr "$W_ERROR_BASH"
  fi
}

check_os() {
  if grep -qs "ubuntu" /etc/os-release; then
    os="ubuntu"
    os_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '"' -f 2 | tr -d '.')
  elif [[ -e /etc/debian_version ]]; then
    os="debian"
    os_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)
  else
    exiterr "$W_ERROR_DIST"
  fi
}

check_os_ver() {
  if [[ "$os" == "ubuntu" && "$os_version" -lt 2404 ]]; then
    exiterr "$W_ERROR_DIST_UBUNTU"
  fi
  if [[ "$os" == "debian" && "$os_version" -lt 12 ]]; then
    exiterr "$W_ERROR_DIST_DEBIAN"
  fi
}

check_kernel() {
  if [[ $(uname -r | cut -d "." -f 1) -lt 6 ]]; then
     exiterr "$W_ERROR_KERNEL"
  fi
}

check_container() {
  if systemd-detect-virt -cq 2>/dev/null; then
    exiterr "$W_ERROR_CONTAINER"
  fi
}

remove_install() {
  local is_show_info
  is_show_info="$1"

  if [[ -n "$is_show_info" ]]; then
    echomsg "$W_DELETE_PROGRAM" 1
  fi

  systemctl disable --now wg-easy-breezy > /dev/null 2>&1
  if [[ -e "$path_docker_compose_file" ]]; then
    "$path_uvx" podman-compose -f "$path_docker_compose_file" down -t 0 > /dev/null 2>&1
  fi

  podman rmi "$wg_easy_image" > /dev/null 2>&1
  podman rmi "$xray_image" > /dev/null 2>&1
  podman rmi "$caddy_image" > /dev/null 2>&1

  if [[ -f "$path_iptables_delete_script" ]]; then
    bash "$path_iptables_delete_script" > /dev/null 2>&1
  fi

  if [[ -L "$path_script_link" ]]; then
    rm -f "$path_script_link"
  fi

  if [[ -L "$path_sysctl_config_link" ]]; then
    rm -f "$path_sysctl_config_link"
    sysctl --system > /dev/null 2>&1
  fi
  
  if [[ -d "$path_data_dir" ]]; then
    rm -rf "$path_data_dir"
  fi

  if [[ -f "$path_systemd_unit_file" ]]; then
    rm -f "$path_systemd_unit_file"
    systemctl daemon-reload
  fi

  if [[ -n "$is_show_info" ]]; then
    echook "$W_DELETE_PROGRAM_OK"
  fi
}

show_spinner() {
  local pid=$1
  local delay=0.1
  local spinner="|/-\\"
  tput civis

  while kill -0 "$pid" 2>/dev/null; do
    for i in $(seq 0 3); do
      printf "\r[%c] $W_PERFORM_WAIT" "${spinner:$i:1}"
      sleep "$delay"
    done
  done

  wait "$pid"
  local status=$?
  tput cnorm
  echo
  return $status
}

wait_for_apt_unlock() {
  local timeout=300
  local waited=0

  while pgrep -x apt >/dev/null || pgrep -x apt-get >/dev/null || pgrep -x dpkg >/dev/null; do
    sleep 1
    [ "$waited" = 0 ] && echomsg "$W_APT_WAITING" 1
    ((waited++))
    if (( waited >= timeout )); then
      exiterr "$W_EXCEEDING_WAIT_TIME ($timeout sec)."
    fi
  done
}

install_pkgs() {
  wait_for_apt_unlock

  echomsg "$W_PKG_UPDATING_AND_ISTALL_DEPENDC" 1
  (
    (
      dpkg --configure -a || dpkg --configure -a
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'dpkg --configure -a'"
    (
      apt-get -yqq update || apt-get -yqq update
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'apt-get update'"
    (
      apt-get -yqq upgrade || apt-get -yqq upgrade
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'apt-get upgrade'"
    (
      apt-get -yqq install podman netavark aardvark-dns iproute2 iptables \
        openssl lsof dnsutils curl idn grep gzip sed nano htop \
      || apt-get -yqq install podman netavark aardvark-dns iproute2 iptables \
        openssl lsof dnsutils curl idn grep gzip sed nano htop
    ) > /dev/null 2>&1 || exiterr "${W_ERROR}: 'apt-get install'"

    # uv https://astral.sh
    # https://docs.astral.sh/uv/reference/installer/
    {
      curl -LsSf https://astral.sh/uv/install.sh \
        | env UV_INSTALL_DIR="$path_uv_dir" INSTALLER_NO_MODIFY_PATH=1 sh
    } > /dev/null 2>&1 || exiterr "${W_ERROR}: 'curl uv install'"
    
    # uv .env
    # https://docs.astral.sh/uv/reference/environment/
    {
      echo "UV_PYTHON_INSTALL_DIR='$path_uv_dir/puthon'"
      echo "UV_PYTHON_CACHE_DIR='$path_uv_dir/puthon/cache'"
      echo "UV_PYTHON_BIN_DIR='$path_uv_dir/puthon/bin'"
      echo "UV_TOOL_DIR='$path_uv_dir/tool'"
      echo "UV_TOOL_BIN_DIR='$path_uv_dir/tool/bin'"
      echo "UV_CACHE_DIR='$path_uv_dir/cache'"
    } > "$path_uv_env_file"

    load_uv_env

    # python-build-standalone https://docs.astral.sh/uv/guides/install-python/
    "$path_uv_dir/uv" python install > /dev/null 2>&1 \
      || exiterr "${W_ERROR}: 'uv python install'"

    # mikefarah yq
    # https://mikefarah.gitbook.io/yq
    yq_path=$(command -v yq)
    if [[ -n "$yq_path" ]]; then
      if ! yq --version 2>/dev/null | grep -q 'mikefarah'; then
        rm -f "$yq_path"
        hash -r 2>/dev/null
      fi
    fi
    if ! command -v yq >/dev/null; then
      local yq_link="https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
      curl -fsSL -H "Cache-Control: no-cache" -H "Pragma: no-cache" $yq_link \
        -o /usr/local/bin/yq || exiterr "${W_ERROR}: 'curl yq install'"
      chmod +x /usr/local/bin/yq
    fi

    # Podman containers configuration, changing the network backend to netavark
    # https://docs.oracle.com/en/operating-systems/oracle-linux/podman/podman-ConfiguringNetworkingforPodman.html#topic_owf_d4t_t5b
    mkdir -p /etc/containers/
    if [[ ! -f /etc/containers/containers.conf ]] && [[ -f /usr/share/containers/containers.conf ]]; then
      cp /usr/share/containers/containers.conf /etc/containers/
    else
      touch /etc/containers/containers.conf
    fi
    if grep -q 'network_backend' /etc/containers/containers.conf; then
      sed -i "/network_backend/c$(printf '%s\n' 'network_backend = "netavark"')" /etc/containers/containers.conf
    else
      if grep -q '^\[network\]' /etc/containers/containers.conf; then
        sed -i '/^\[network\]/a network_backend = "netavark"' /etc/containers/containers.conf
      else
        {
          echo ''
          echo '[network]'
          echo 'network_backend = "netavark"'
        } >> /etc/containers/containers.conf
      fi
    fi

    podman pull "$wg_easy_image" > /dev/null 2>&1 || exiterr "${W_ERROR}: 'podman pull $wg_easy_image'"

  ) & show_spinner $!
}

check_tag() {
  local tag="$1"
  local service_name="${service_prefix}-${tag}"

  if [[ ! "$tag" =~ ^[A-Za-z0-9-]{1,16}$ ]]; then
    echoerr "$W_TAG_NOT_REQUIREMENTS"
    return 1
  fi

  if [[ -f "$path_docker_compose_file" ]] && \
    [[ "$(yq e ".services.\"$service_name\"" "$path_docker_compose_file")" != "null" ]]
  then
    echoerr "$W_TAG_BUSY_ANOSER_SERVICE"
    return 1
  fi

  return 0
}

check_domain() {
  if [[ ! "$1" =~ ^([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,}$ ]]; then
    echoerr "$W_INCORRECT_DOMAIN"
    is_domain=""
    return 1
  fi
  is_domain="true"
  return 0
}

check_IPv4() {
  if [[ ! "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    echoerr "$W_INCORRECT_FORMAT_IPV4"
    return 1
  fi

  IFS='.' read -r -a octets <<< "$1"
  for octet in "${octets[@]}"; do
    if [[ "$octet" != "0" && "$octet" =~ ^0 ]]; then
      echoerr "$W_INCORRECT_OCTET_IPV4"
      return 1
    fi

    dec_octet=$((10#$octet))
    if ((dec_octet < 0 || dec_octet > 255)); then
      echoerr "$W_WRONG_RANGE_OCTET_IPV4"
      return 1
    fi
  done

  return 0
}

check_email() {
  if [[ ! "$1" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    echoerr "$W_INCORRECT_EMAIL"
    return 1
  fi

  return 0
}

check_password() {
  if [ -z "$1" ]; then
    echoerr "$W_PASSWORD_CANNOT_BE_EMPTY"
    return 1
  fi

  if [ "${#1}" -lt 6 ]; then
    echoerr "$W_PASSWORD_SHORT"
    return 1
  fi

  if ! echo "$1" | grep -q '[a-zA-Z]'; then
    echoerr "$W_PASSWORD_ONE_LETTER"
    return 1
  fi

  if ! echo "$1" | grep -q '[0-9]'; then
    echoerr "$W_PASSWORD_ONE_DIGIT"
    return 1
  fi

  return 0
}

check_port() {
  local port="$1"

  if ! [[ "$port" =~ ^[0-9]+$ ]]; then
    echoerr "$W_PORT_MUST_NUMBER"
    return 1
  fi

  if [ "$port" -lt 49152 ] || [ "$port" -gt 65534 ]; then
    echoerr "$W_PORT_SHOULD_RANGE"
    return 1
  fi

  if lsof -i :"$port" >/dev/null ; then
    echoerr "$W_PORT_BUSY"
    return 1
  fi

  if [[ -f "$path_docker_compose_file" ]]; then
    yq -r '.services | keys[]' "$path_docker_compose_file" | while read -r service; do
      if [[ "$service" == "${service_prefix}-"* ]]; then
        local port_wg port_ui
        port_wg=$(get_env_var_from_service "$service" "WG_PORT" "")
        port_ui=$(get_env_var_from_service "$service" "PORT" "")
        if [[ "$port" == "$port_wg" ]] || [[ "$port" == "$port_ui" ]]; then
          echoerr "$W_PORT_BUSY"
          return 1
        fi
      fi
    done
  fi

  return 0
}

get_public_ip() {
  local public_ip

  public_ip=$(ip route get 1.1.1.1 2>/dev/null | awk '{for(i=1;i<=NF;i++) if ($i=="src") print $(i+1)}')

  [ -z "$public_ip" ] && command -v dig >/dev/null && \
    public_ip=$(dig +short -4 myip.opendns.com @resolver1.opendns.com)

  [ -z "$public_ip" ] && command -v curl >/dev/null && \
    public_ip=$(curl -s https://api.ipify.org)

  if ! check_IPv4 "$public_ip"; then
    echoerr "$W_FAILED_DETERMINE_PUBLIC_IP"

    while true; do
      echomsg "$W_ENTER_IPV4_THIS_SERVER" 1
      read -rp " > " public_ip
      if check_IPv4 "$public_ip"; then break; fi
    done
  fi

  echo "$public_ip"
}

input_tag() {
  while true; do
    echomsg "$W_INPUT_TAG" 1
    read -rp " > " service_tag

    if check_tag "$service_tag"; then
      break
    fi
  done
}

input_domain() {
  while true; do
    echomsg "$W_INPUT_DOMAIN" 1
    read -rp " > " host

    if [ -z "$host" ]; then
      host=$(get_public_ip)
      break
    else
      host=$(idn "$host" | tr '[:upper:]' '[:lower:]')
      if check_domain "$host"; then
        break
      fi
    fi
  done

  if grep -q '^WG_HOST=' "$path_env_file"; then
    sed -i "s/^WG_HOST=.*/WG_HOST=$host/" "$path_env_file"
  else
    echo "WG_HOST=$host" >> "$path_env_file"
  fi
}

input_email() {
  [[ "$is_domain" ]] || return

  while true; do
    echomsg "$W_INPUT_EMAIL" 1
    read -rp " > " email
    if check_email "$email"; then
      break
    fi
  done
}

input_xray_link() {
  [[ "$install_mode" = "main" ]] && return

  while true; do
    echomsg "$W_INPUT_XRAY_LINK" 1
    read -rp " > " xray_link
    
    if [ -z "$xray_link" ]; then
      break
    fi

    xray_ip="${xray_link%@*}"
    if ! check_IPv4 "$xray_ip"; then
      continue
    fi

    if xray_config=$(echo "${xray_link#*@}" | base64 -d | gzip -d 2>/dev/null); then
      break
    else
      echoerr "$W_FAILED_DECODE_BASE64"
    fi
  done
}

input_port() {
  while true; do
    echomsg "$W_INPUT_PORT" 1
    read -rp " > " port_wg

    port_ui=$((port_wg + 1))

    if check_port "$port_wg" && check_port "$port_ui"; then
      break
    fi
  done
}

input_address() {
  local default_value="10.0.0.x"

  while true; do
    echomsg "$W_INPUT_ADDRESS" 1
    read -r -e -i "$default_value" address
    address=${address:-$default_value}

    if [[ -f "$path_docker_compose_file" ]]; then
      local conflict=0
      while read -r service; do
        if [[ "$service" == "${service_prefix}-"* ]]; then
          local existing_address
          existing_address=$(get_env_var_from_service "$service" "WG_DEFAULT_ADDRESS" "")
          if [[ "$address" == "$existing_address" ]]; then
            echoerr "$W_SUBNET_BUSY"
            conflict=1
            break
          fi
        fi
      done < <(yq -r '.services | keys[]' "$path_docker_compose_file")

      if [[ "$address" == "192.168.100.x" ]]; then
        echoerr "$W_SUBNET_BUSY"
        conflict=1
      fi

      if [[ "$conflict" -eq 1 ]]; then
        continue
      fi
    fi

    break
  done
}

input_password() {
  local output_wgpw password password_hash

  while true; do
    echomsg "$W_INPUT_PASSWORD" 1
    read -rsp " > " password

    if check_password "$password"; then
      output_wgpw=$(podman run --rm -it $wg_easy_image wgpw "$password")
      password_hash=$(echo "$output_wgpw" | tr -d '\r\n')
      if grep -q '^PASSWORD_HASH=' "$path_env_file"; then
        sed -i "s|^PASSWORD_HASH=.*|$password_hash|" "$path_env_file"
      else
        echo "$password_hash" >> "$path_env_file"
      fi
      echo

      break
    fi
  done
}

find_optimal_wg_mtu() {
  local target=8.8.8.8
  local low=1300
  local high=1500
  local last_good=0
  local wg_mtu

  echomsg "$W_SEARCH_OPTIMAN_MTU" 1

  while (( low <= high )); do
    local mid=$(((low + high) / 2))
    local size=$((mid - 28))  # 20 bytes IP + 8 bytes ICMP

    if ping -c1 -W1 -M "do" -s "$size" "$target" &>/dev/null; then
      last_good=$mid
      low=$((mid + 1))
    else
      high=$((mid - 1))
    fi
  done

  if [ "$last_good" -ge 1000 ] 2>/dev/null; then
    wg_mtu=$((last_good - 80))
    (( wg_mtu < 1200 )) && wg_mtu=1200
  else
    wg_mtu=1420
  fi
  echo "WG_MTU=$wg_mtu" >> $path_env_file 
}

get_iptables_path() {
  local path
  path=$(command -v iptables)

  if [[ $(systemd-detect-virt) == "openvz" ]] && \
     readlink -f "$path" | grep -q "nft" && \
     hash iptables-legacy 2>/dev/null; then
    path=$(command -v iptables-legacy)
  fi

  echo "$path"
}

add_iptables_rule() {
  local port="$1"
  local proto="$2"
  local iptables_path
  iptables_path="$(get_iptables_path)"
  local apply_rule="$iptables_path -w 5 -I INPUT -p $proto --dport $port -j ACCEPT"
  local delete_rule="$iptables_path -w 5 -D INPUT -p $proto --dport $port -j ACCEPT"

  grep -qxF "$apply_rule" "$path_iptables_apply_script" 2>/dev/null || \
    echo "$apply_rule" >> "$path_iptables_apply_script"
  grep -qxF "$delete_rule" "$path_iptables_delete_script" 2>/dev/null || \
    echo "$delete_rule" >> "$path_iptables_delete_script"
}

remove_iptables_rule() {
  local port="$1"
  if [[ "$port" ]]; then
    sed -i "/\b$port\b/d" "$path_iptables_apply_script"
    sed -i "/\b$port\b/d" "$path_iptables_delete_script"
  fi
}

create_iptables_scripts() {
  echomsg "$W_CREATION_IPTABLES_SCRIPTS" 1

  mkdir -p "$(dirname "$path_iptables_apply_script")"
  mkdir -p "$(dirname "$path_iptables_delete_script")"

  touch "$path_iptables_apply_script"
  touch "$path_iptables_delete_script"

  {
    echo "#!/bin/bash"
    echo ""
  } | tee "$path_iptables_apply_script" "$path_iptables_delete_script" > /dev/null

  local iptables_path
  iptables_path="$(get_iptables_path)"
  echo "$iptables_path -w 5 -I INPUT -p tcp --dport 80 -j DROP" >> "$path_iptables_apply_script"
  echo "$iptables_path -w 5 -D INPUT -p tcp --dport 80 -j DROP" >> "$path_iptables_delete_script"

  chmod +x "$path_iptables_apply_script" "$path_iptables_delete_script"
}

add_xray_to_wg_service() {
  [[ -z "$1" ]] && exiterr "add_xray_to_wg_service() service name parameter not passed"

  local service_name="$1"
  local xray_container="xray-$service_name"

  if ! podman images -q "$xray_image" | grep -q .; then
    podman pull "$xray_image" > /dev/null 2>&1 || exiterr "${W_ERROR}: 'podman pull $xray_image'"
  fi

  mkdir -p "$path_xray_configs_dir"
  local path_xray_config="$path_xray_configs_dir/$xray_container.conf"
  echo "$xray_config" > "$path_xray_config"
  xray_config=""

  yq e -i "
    .services.${service_name}.devices = [\"/dev/net/tun\"]
  " "$path_docker_compose_file"

  yq e -i ".services.${service_name}.environment += {
      \"WG_DEVICE\": \"tun0\",
      \"XRAY_IP\": \"${xray_ip}\",
      \"XRAY_CONTAINER\": \"${xray_container}\"
    }
  " "$path_docker_compose_file"

  yq e -i "
    .services.${service_name}.depends_on = [\"${xray_container}\"]
  " "$path_docker_compose_file"

  yq e -i ".services.${xray_container} = {
    \"image\": \"${xray_image}\",
    \"container_name\": \"${xray_container}\",
    \"volumes\": [
      \"${path_xray_config}:/etc/xray/config.json\"
    ],
    \"networks\": [\"${service_prefix}\"]
  }" "$path_docker_compose_file"
}

remove_xray_from_wg_service() {
  [[ -z "$1" ]] && exiterr "remove_xray_from_wg_service() service name parameter not passed"

  local service_name="$1"
  local xray_container="xray-$service_name"
  {
    "$path_uvx" podman-compose -f "$path_docker_compose_file" down -t 0 "$xray_container"
    "$path_uvx" podman-compose -f "$path_docker_compose_file" down -t 0 "$service_name"
  } > /dev/null 2>&1
  sleep 2

  rm -f "$path_xray_configs_dir/$xray_container.conf"

  yq e -i "del(.services.${xray_container})" "$path_docker_compose_file"

  yq e -i "del(.services.${service_name}.devices)" "$path_docker_compose_file"

  for key in WG_DEVICE XRAY_IP XRAY_CONTAINER; do
    yq e -i "del(.services.${service_name}.environment.${key})" "$path_docker_compose_file"
  done

  yq e -i "del(.services.${service_name}.depends_on)" "$path_docker_compose_file"
  {
    "$path_uvx" podman-compose -f $path_docker_compose_file up -d --force-recreate "$service_name"
  } > /dev/null 2>&1
}

add_wg_service() {
  local service_name="$service_prefix-$1"
  local port_wg="${2:-51820}"
  local port_ui="${3:-51821}"
  local address="${4:-10.8.1.x}"
  local is_proxy="${5:-}"

  yq e -i ".services.${service_name} = {
    \"image\": \"${wg_easy_image}\",
    \"container_name\": \"${service_name}\",
    \"environment\": {
      \"LANG\": \"\${LANG}\",
      \"WG_HOST\": \"\${WG_HOST}\",
      \"PASSWORD_HASH\": \"\${PASSWORD_HASH}\",
      \"PORT\": \"${port_ui}\",
      \"WG_PORT\": \"${port_wg}\",
      \"WG_MTU\": \"\${WG_MTU}\",
      \"WG_PERSISTENT_KEEPALIVE\": \"\${WG_PERSISTENT_KEEPALIVE}\",
      \"WG_DEFAULT_ADDRESS\": \"${address}\",
      \"WG_DEFAULT_DNS\": \"\${WG_DEFAULT_DNS}\",
      \"UI_TRAFFIC_STATS\": \"\${UI_TRAFFIC_STATS}\"
    },
    \"volumes\": [
      \"${service_name}:/etc/wireguard\",
      \"/lib/modules:/lib/modules\"
    ],
    \"networks\": [\"${service_prefix}\"],
    \"ports\": [
      \"${port_wg}:${port_wg}/udp\",
      \"${port_ui}:${port_ui}/tcp\"
    ],
    \"privileged\": true,
    \"ulimits\": {
      \"nofile\": {
        \"soft\": 51200,
        \"hard\": 51200
      }
    }
  }" "$path_docker_compose_file"

  if [ -n "$is_proxy" ]; then
    add_xray_to_wg_service "$service_name"
  fi

  yq e -i ".volumes += {
    \"${service_name}\": { \"name\": \"${service_name}\" }
  }" "$path_docker_compose_file"

  add_iptables_rule "$port_wg" "udp"
  add_iptables_rule "$port_ui" "tcp"

  if [[ -f "$path_caddyfile" ]]; then
    {
      echo "handle_path /$service_name/* {"
      echo "  reverse_proxy $service_name:$port_ui"
      echo "}"
    } >> "$path_caddyfile"
    
    link_ui="https://${WG_HOST}/${service_name}/"
  else
    link_ui="http://${WG_HOST}:${port_ui}"
  fi
}

add_caddy_service() {
  [[ "$is_domain" ]] || return

  podman pull "$caddy_image" > /dev/null 2>&1 || exiterr "${W_ERROR}: 'podman pull $caddy_image'"
  
  local service_name="caddy-$service_prefix"

  yq e -i ".services.${service_name} = {
    \"image\": \"${caddy_image}\",
    \"container_name\": \"${service_name}\",
    \"cap_add\": [\"NET_ADMIN\"],
    \"ports\": [
      \"443:443/tcp\",
      \"443:443/udp\"
    ],
    \"volumes\": [
      \"${path_caddyfile}:/etc/caddy/Caddyfile\",
      \"${service_name}-data:/data\",
      \"${service_name}-config:/config\"
    ],
    \"networks\": [\"${service_prefix}\"]
  }" "$path_docker_compose_file"

  yq e -i ".volumes += {
    \"${service_name}-data\": { \"name\": \"${service_name}-data\" },
    \"${service_name}-config\": { \"name\": \"${service_name}-config\" }
  }" "$path_docker_compose_file"

  add_iptables_rule "443" "udp"
  add_iptables_rule "443" "tcp"

  mkdir -p "$(dirname "$path_caddyfile")"
  {
    echo "$host"
    echo "tls $email"
  } > "$path_caddyfile"

  yq -r '.services | keys[]' "$path_docker_compose_file" | while read -r service; do
    if [[ "$service" == "${service_prefix}-"* ]]; then
      local port_ui
      port_ui=$(get_env_var_from_service "$service" "PORT" "not_found")
      {
        echo "handle_path /$service/* {"
        echo "  reverse_proxy $service:$port_ui"
        echo "}"
      } >> "$path_caddyfile"
    fi
  done
}

create_wg_install_mode() {
  case "$install_mode" in
    "main")
      add_wg_service "$service_tag" "$port_wg" "$port_ui" "$address"
    ;;
    "proxy")
      add_wg_service "$service_tag" "$port_wg" "$port_ui" "$address" "proxy"
    ;;
    *)
      exiterr "$W_UNKNOWN_INSTALL_MODE"
    ;;
  esac
}

create_services_config() {
  load_env

  echomsg "$W_CREATING_SERVICE_CONFIG" 1

  mkdir -p "$(dirname "$path_docker_compose_file")"
  echo -e "services: {}\nvolumes: {}\nnetworks: {}" > "$path_docker_compose_file"

  [[ "$is_domain" ]] && add_caddy_service

  create_wg_install_mode

  yq e -i ".networks += {
    \"${service_prefix}\": {
      \"name\": \"${service_prefix}\",
      \"driver\": \"bridge\",
      \"ipam\": {
        \"config\": [
          {
            \"subnet\": \"192.168.100.0/24\",
            \"gateway\": \"192.168.100.1\"
          }
        ]
      }
    }
  }" "$path_docker_compose_file"
}

create_sysctl_config () {
  echomsg "$W_CREATING_NETWORK_SETTINGS" 1

  mkdir -p "$(dirname "$path_sysctl_config")"
  mkdir -p "$(dirname "$path_sysctl_config_link")"
  
  curl -fsSL -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
    https://raw.githubusercontent.com/jinndi/wg-easy-breezy/main/sysctl.conf \
    -o "$path_sysctl_config" || exiterr "${W_ERROR}: 'curl sysctl.conf'"

  if modprobe -q tcp_bbr && [ -f /proc/sys/net/ipv4/tcp_congestion_control ]
  then
    echo "net.core.default_qdisc = fq" >> "$path_sysctl_config"
    echo "net.ipv4.tcp_congestion_control = bbr" >> "$path_sysctl_config"
  else
    if modprobe -q tcp_hybla && [ -f /proc/sys/net/ipv4/tcp_congestion_control ]
    then
      echo "net.ipv4.tcp_congestion_control = hybla" >> "$path_sysctl_config"
    fi
  fi

  ln -s "$path_sysctl_config" "$path_sysctl_config_link"

  sysctl -e -q -p "$path_sysctl_config_link"
}

create_systemd_unit() {
  local working_dir

  working_dir="$(dirname "$path_docker_compose_file")"

  echomsg "$W_CREATING_SYSTEMD_SERVICE" 1
  {
    echo "[Unit]"
    echo "Description=wg-easy-breezy with iptables hooks via podman-compose"
    echo "After=network-online.target"
    echo "Wants=network-online.target"
    echo
    echo "[Service]"
    echo "Type=simple"
    echo "WorkingDirectory=$working_dir"
    echo "EnvironmentFile=$path_env_file"
    echo "EnvironmentFile=$path_uv_env_file"
    echo "ExecStartPre=$path_iptables_apply_script"
    echo "ExecStart=$path_uvx podman-compose -f $path_docker_compose_file up --force-recreate --remove-orphans"
    echo "ExecStop=$path_uvx podman-compose -f $path_docker_compose_file down --timeout 5"
    echo "ExecStopPost=$path_iptables_delete_script"
    echo "Restart=on-failure"
    echo "RestartSec=10"
    echo "LimitNOFILE=51200"
    echo
    echo "[Install]"
    echo "WantedBy=multi-user.target"
  } > "$path_systemd_unit_file"

  systemctl daemon-reexec
  systemctl daemon-reload
}

is_all_ok_services() {
  if [[ ! -e "$path_docker_compose_file" ]]; then
    return 1
  fi

  if ! systemctl is-active --quiet wg-easy-breezy; then
    return 1
  fi

  return 0
}

wait_for_containers() {
  sleep 5
  mapfile -t services < <(yq -r '.services | keys[]' "$path_docker_compose_file")

  local failed=0

  for service in "${services[@]}"; do
    local elapsed=0
    local status=""
    while true; do
      status=$(podman inspect -f '{{.State.Status}}' "$service" 2>/dev/null || echo "notfound")

      if [[ "$status" == "running" ]]; then
        break
      elif [[ "$status" == "exited" || "$status" == "stopped" || "$status" == "notfound" ]]; then
        failed=1
        break
      fi

      sleep 2
      ((elapsed++))
      if (( elapsed >= 40 )); then
        echoerr "$W_TIMEOUT_LAUNCH_CONTAINERS"
        break
      fi
    done
  done

  if (( failed == 1 )); then
    echoerr "$W_SOME_CONTAINERS_NOT_START"
    return 1
  fi

  return 0
}

start_services() {
  echomsg "$W_LAUNCH_SERVICE" 1

  systemctl enable --now wg-easy-breezy > /dev/null 2>&1
  wait_for_containers

  if ! systemctl is-active --quiet wg-easy-breezy; then
    echoerr "$W_LAUNCH_SERVICE_FAILED"
  else
    echook "$W_SERVICE_SUCCESS_LAUNCH"
  fi
}

stop_services() {
  echomsg "$W_STOP_SERVICE" 1

  if [[ -f "$path_docker_compose_file" ]]; then
    systemctl disable --now wg-easy-breezy > /dev/null 2>&1
    sleep 5
    if systemctl is-active --quiet wg-easy-breezy; then
      echoerr "$W_SERVICE_STOP_FAILED"
    else
    echook "$W_SERVICE_SUCCESS_STOPPED"
    fi
  else
    echoerr "${W_ERROR}: '$path_docker_compose_file' not found"
  fi
}

switch_active_services() {
  if is_all_ok_services; then
    stop_services
  else
    start_services
  fi

  press_any_side_to_open_menu
}

restart_services() {
  echomsg "$W_RESTART_SERVICE" 1

  systemctl stop wg-easy-breezy > /dev/null 2>&1
  systemctl start wg-easy-breezy > /dev/null 2>&1
  wait_for_containers

  if is_all_ok_services; then
    echook "$W_SERVICE_SUCCESS_RESTARTED"
  else
    echoerr "$W_ERROR_RESTART_SERVICE"
  fi

  press_any_side_to_open_menu
}

get_env_var_from_service() {
  local service="$1"
  local var_name="$2"
  local default_value="${3:-}"

  yq -r ".services.\"$service\".environment.\"$var_name\" // \"$default_value\"" "$path_docker_compose_file"
}

show_services_list() {
  local service container_status ports status xray_ip port_ui address mount_point client_count
  local output=""

  mapfile -t services < <(yq -r '.services | keys[]' "$path_docker_compose_file")

  for service in "${services[@]}"; do
    container_status=$(podman ps -a --filter "name=^${service}$" --format "{{.Status}}")

    if [[ -z "$container_status" ]]; then
      status="\033[1;34m$W_NOT_LAUNCHED\033[0m"
    elif [[ "$container_status" =~ ^Up ]]; then
      status="\033[1;32m$W_RUNNING\033[0m"
    elif [[ -n "$container_status" ]]; then
      status="\033[1;31m$W_NOT_WORK\033[0m"
    else
      status="$W_UNKNOWN"
    fi

    ports=$(yq -r ".services.\"$service\".ports // [] | join(\", \")" "$path_docker_compose_file")
    [[ -z "$ports" ]] && ports="—"

    output+="\n\033[0;36m$W_SERVICE_NAME:\033[0m $service\n"
    output+="\033[0;36m$W_STATUS:\033[0m $status\n"
    output+="\033[0;36m$W_PORTING_PORTS:\033[0m $ports\n"

    if [[ "$service" == "${service_prefix}-"* ]]; then
      xray_ip=$(get_env_var_from_service "$service" "XRAY_IP" "")
      port_ui=$(get_env_var_from_service "$service" "PORT" "-")
      address=$(get_env_var_from_service "$service" "WG_DEFAULT_ADDRESS" "-")

      if podman volume exists "$service"; then
        mount_point=$(podman volume inspect "$service" --format '{{ .Mountpoint }}')
        if [[ -f "$mount_point/wg0.json" ]]; then
          client_count=$(yq '(.clients // {}) | length' "$mount_point/wg0.json")
        else
          client_count=0
        fi
      else
        client_count="\033[1;31mоvolume not found!\033[0m"
      fi

      if [[ -n "$xray_ip" ]]; then
        output+="\033[0;36m$W_PROXY_MODE:\033[0m Vless -> ${xray_ip}\n"
      fi

      output+="\033[0;36m$W_CLIENTS_SUBNET:\033[0m $address\n"

      output+="\033[0;36m$W_CLIENTS_COUNT:\033[0m $client_count\n"

      if [[ -f "$path_caddyfile" ]]; then
        output+="\033[0;36m$W_WEB_INTERFACE:\033[0m https://${WG_HOST}/${service}/\n"
      else
        output+="\033[0;36m$W_WEB_INTERFACE:\033[0m http://${WG_HOST}:${port_ui}\n"
      fi
    fi

    output+="___________________________________________________\n"
  done

  echo -e "$output"
}

add_new_wg_service() {
  select_install_mode 1

  input_tag
  input_xray_link
  input_port
  input_address

  create_wg_install_mode

  local service_name="$service_prefix-$service_tag"

  {
    if [[ "$(yq e ".services.\"xray-$service_name\"" "$path_docker_compose_file")" != "null" ]]
    then
      "$path_uvx" podman-compose -f "$path_docker_compose_file" up -d "xray-$service_name"
    fi

    "$path_uvx" podman-compose -f "$path_docker_compose_file" up -d "$service_name"

    podman container exists caddy-wgeb && \
    "$path_uvx" podman-compose -f $path_docker_compose_file up -d --force-recreate caddy-wgeb
  } > /dev/null 2>&1
  
  wait_for_containers

  echo -e "\n\033[1;32m🎉 wg-easy $W_ADDED! \033[0m"
  echo -e "\033[0;36m$W_WEB_INTERFACE: \033[1;32m$link_ui \033[0m\n"

  press_any_side_to_open_menu "containers"
}

remove_wg_service() {
  while true; do
    echo -e "$W_INPUT_SERVICE_NAME_DELETE"
    read -rp " > " service_name

    if [[ -z "$service_name" ]]; then
      select_containers_menu
      return
    fi

    if [[ "$service_name" == "$service_prefix"* ]] && \
       [[ "$(yq e ".services.\"$service_name\"" "$path_docker_compose_file")" != "null" ]];
    then
      echo -e "$W_DELETE_WG_SETTINGS"
      local msg
      msg="[y/N]: "
      read -rp "$msg" remove_volume

      until [[ "$remove_volume" =~ ^[yYnNдДнН]$ ]]; do
        echoerr "$W_INCORRECT_OPTION"
        read -rp "$msg" remove_volume
      done

      if [[ "$remove_volume" =~ ^[yYдД]$ ]]; then
        podman volume rm "$service_name" > /dev/null 2>&1
      fi

      echomsg "$W_DELETE_SERVICE '$service_name'" 1
      break
    else
      echoerr "$W_SERVICE_NOT_FOUND '$service_name'"
    fi
  done

  {
    if [[ "$(yq e ".services.\"xray-$service_name\"" "$path_docker_compose_file")" != "null" ]]
    then
      "$path_uvx" podman-compose -f "$path_docker_compose_file" down -t 0 "xray-$service_name"
      yq e -i "del(.services.xray-${service_name})" "$path_docker_compose_file"
    fi

    "$path_uvx" podman-compose -f "$path_docker_compose_file" down -t 0 "$service_name" 
  } > /dev/null 2>&1

  slep 2

  local port_wg port_ui

  port_wg=$(get_env_var_from_service "$service_name" "WG_PORT" "")
  port_ui=$(get_env_var_from_service "$service_name" "PORT" "")
  remove_iptables_rule "$port_wg"
  remove_iptables_rule "$port_ui"

  yq e -i "del(.services.${service_name})" "$path_docker_compose_file"
  yq e -i "del(.volumes.${service_name})" "$path_docker_compose_file"

  if [[ -f "$path_caddyfile" ]]; then
    sed -i "/^[[:space:]]*handle_path[[:space:]]\+\\/$service_name\\/\\*/,/^[[:space:]]*}/d" "$path_caddyfile"
  fi

  {
    podman container exists caddy-wgeb && \
    "$path_uvx" podman-compose -f $path_docker_compose_file up -d --force-recreate caddy-wgeb
  } > /dev/null 2>&1

  echook "$W_SERVICE_DELETED!"
  press_any_side_to_open_menu "containers"
}

change_proxy() {
  [[ -z "$1" ]] && exiterr "change_proxy() service name parameter not passed"

  local service_name="${1:-}"
  local is_edit="${2:-}"
  install_mode="proxy"

  input_xray_link
  add_xray_to_wg_service "$service_name"
  {
    "$path_uvx" podman-compose -f $path_docker_compose_file up -d --force-recreate "$service_name"
  } > /dev/null 2>&1
  wait_for_containers

  if [[ -n "$is_edit" ]]; then
    echook "$W_PROXY_CHANGED!"
  else
    echook "$W_PROXY_ADDED!"
  fi

  press_any_side_to_open_menu "containers"
}

remove_proxy() {
  [[ -z "$1" ]] && exiterr "remove_proxy() service name parameter not passed"

  local service_name="${1:-}"

  remove_xray_from_wg_service "$service_name"
  wait_for_containers
  echook "$W_PROXY_DELETED!"

  press_any_side_to_open_menu "containers"
}

proxy_management() {
  local is_proxy

  while true; do
    echo -e "$W_INPUT_SERVICE_NAME_PROXY"
    read -rp " > " service_name

    if [[ -z "$service_name" ]]; then
      select_containers_menu
      return
    fi

    if [[ "$service_name" == "$service_prefix"* ]] && \
       [[ "$(yq e ".services.\"$service_name\"" "$path_docker_compose_file")" != "null" ]];
    then
      is_proxy=$(get_env_var_from_service "$service_name" "XRAY_IP" "")

      if [[ -z "$is_proxy" ]]; then
        echo -e "$W_SELECT_OPTION"
        echo -e "$W_NO_PROXY_OPTIONS"
        read -rp "$W_CHOICE: " action

        until [[ "$action" =~ ^[1-2]$ ]]; do
          echoerr "$W_INCORRECT_OPTION"
          read -rp "$W_CHOICE: " action
        done

        case "$action" in
          1)
            change_proxy "$service_name"
          ;;
          2)
            select_containers_menu
          ;;
        esac
      else
        echo -e "$W_SELECT_OPTION"
        echo -e "$W_PROXY_OPTIONS"
        read -rp "$W_CHOICE: " action

        until [[ "$action" =~ ^[1-3]$ ]]; do
          echoerr "$W_INCORRECT_OPTION"
          read -rp "$W_CHOICE: " action
        done

        case "$action" in
          1)
            change_proxy "$service_name" "edit"
          ;;
          2)
            remove_proxy "$service_name"
          ;;
          3)
            select_containers_menu
          ;;
        esac   
      fi
      break
    else
      echoerr "$W_SERVICE_NOT_FOUND '$service_name'"
    fi
  done
}

remove_services() {
  echo
  local msg
  msg="$W_DELETE_APP [y/N]: "
  read -rp "$msg" remove

  until [[ "$remove" =~ ^[yYnNдДнН]$ ]]; do
    echoerr "$W_INCORRECT_OPTION"
    read -rp "$msg" remove
  done

  if [[ "$remove" =~ ^[yYдД]$ ]]; then
    remove_install "1"
    exit 0
  else
    select_menu_option
  fi
}

select_install_mode() {
  local is_menu="${1:-}"
  local total_items=2
  echo -e "$W_SELECT_INSTALL_MODE"
  if [[ -n "$is_menu" ]]; then
    echo " 3) $W_RETURN_MENU"
    total_items=3
  fi

  read -rp "$W_CHOICE: " mode
  until [[ "$mode" =~ ^[1-$total_items]$ ]]; do
    echoerr "$W_INCORRECT_OPTION"
    read -rp "$W_CHOICE: " mode
  done

  case "$mode" in
    1)
      install_mode="main"
    ;;
    2)
      install_mode="proxy"
    ;;
    3)
      select_containers_menu
    ;;
  esac
}

add_domain() {
  input_domain
  input_email
  if [[ "$is_domain" ]]; then
    add_caddy_service

    systemctl restart wg-easy-breezy > /dev/null 2>&1
    wait_for_containers

    echook "$W_DOMAIN_ADDED_AND_ACTIVATED"
    press_any_side_to_open_menu "domain"
  fi
  select_domain_option
}

change_domain() {
  host=""

  while true; do
    echomsg "$W_INPUT_NEW_DOMAIN" 1
    read -rp " > " host

    if [ -z "$host" ]; then
      break
    else
      host=$(idn "$host" | tr '[:upper:]' '[:lower:]')

      if check_domain "$host"; then
        echomsg "$W_APPLY_DOMAIN '$host'" 1

        systemctl stop wg-easy-breezy > /dev/null 2>&1

        if grep -q '^WG_HOST=' "$path_env_file"; then
          sed -i "s/^WG_HOST=.*/WG_HOST=$host/" "$path_env_file"
        else
          echo "WG_HOST=$host" >> "$path_env_file"
        fi

        if grep -q "$WG_HOST" "$path_caddyfile"; then
          sed -i "s/$WG_HOST/$host/" "$path_caddyfile"
        else
          sed -i "1i $host" "$path_caddyfile"
        fi

        systemctl start wg-easy-breezy > /dev/null 2>&1

        echook "$W_DOMAIN_NAME_CHANGED"
        break
      fi
    fi
  done

  select_domain_option
}

remove_domain() {
  local msg
  echoerr "$W_DOMAIN_REMOVAL"
  msg="$W_DELETE [y/N]: "
  read -rp "$msg" remove

  until [[ "$remove" =~ ^[yYnNдДнН]$ ]]; do
    echoerr "$W_INCORRECT_OPTION"
    read -rp "$msg" remove
  done

  if [[ "$remove" =~ ^[yYдД]$ ]]; then
    local service_name="caddy-$service_prefix"

    echomsg "$W_DELETE_DOMAIN_NAME" 1

    systemctl stop wg-easy-breezy > /dev/null 2>&1

    yq e -i "del(.services.${service_name})" "$path_docker_compose_file" > /dev/null 2>&1
    yq e -i "del(.volumes.${service_name}-data)" "$path_docker_compose_file" > /dev/null 2>&1
    yq e -i "del(.volumes.${service_name}-config)" "$path_docker_compose_file" > /dev/null 2>&1

    remove_iptables_rule "443"

    [[ -f "$path_caddyfile" ]] && rm "$path_caddyfile"

    host=$(get_public_ip)
    if grep -q '^WG_HOST=' "$path_env_file"; then
      sed -i "s/^WG_HOST=.*/WG_HOST=$host/" "$path_env_file"
    else
      echo "WG_HOST=$host" >> "$path_env_file"
    fi

    systemctl start wg-easy-breezy > /dev/null 2>&1
    wait_for_containers

    echook "$W_DOMAIN_NAME_DELETED"
  fi

  select_domain_option
}

select_domain_option() {
  load_env

  show_header

  local is__domain=""
  [[ -f "$path_caddyfile" ]] &&  \
  [[ "$WG_HOST" =~ ^([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,}$ ]] && \
  is__domain="true"

  if [[ "$is__domain" ]]; then 
    echook "\n\033[0;36m$W_YOUR_DOMAIN:\033[0m $WG_HOST"
    local domen_ip
    domen_ip=$(dig +short -4 "$WG_HOST")
    [[ $domen_ip ]] || domen_ip="\033[1;31m$W_NO_BINDING\033[0m"
    echook "\033[0;36m$W_TIED_TO_IP:\033[0m $domen_ip"
  else
    echoerr "$W_NO_DOMAIN_NAME"
  fi
  echo -e "$W_SELECT_OPTION:"

  if [[ "$is__domain" ]]; then
    echo -e "$W_DOMAIN_OPTIONS"
    read -rp "$W_CHOICE: " action

    until [[ "$action" =~ ^[1-3]$ ]]; do
      echoerr "$W_INCORRECT_OPTION"
      read -rp "$W_CHOICE: " action
    done

    case "$action" in
      1)
        change_domain
      ;;
      2)
        remove_domain
      ;;
      3)
        select_menu_option
      ;;
    esac
  else
    echo -e "$W_NO_DOMAIN_OPTIONS"
    read -rp "$W_CHOICE: " action

    until [[ "$action" =~ ^[1-2]$ ]]; do
      echoerr "$W_INCORRECT_OPTION"
      read -rp "$W_CHOICE: " action
    done

    case "$action" in
      1)
        add_domain
      ;;
      2)
        select_menu_option
      ;;
    esac
  fi
}

change_password() {
  input_password

  systemctl restart wg-easy-breezy > /dev/null 2>&1
  wait_for_containers

  press_any_side_to_open_menu
}

show_podman_logs() {
  for name in $(podman ps --format '{{.Names}}' | grep "$service_prefix"); do
    echo -e "\n\033[1;34m=== $W_LOGS $name ===\033[0m"
    podman logs --tail 30 "$name"
  done
  press_any_side_to_open_menu "containers"
}

select_containers_menu() {
  clear
  show_header
  show_services_list

  echo -e "$W_CONTAINER_OPTIONS"

  read -rp "$W_CHOICE: " option
  until [[ "$option" =~ ^[1-5]$ ]]; do
    echoerr "$W_INCORRECT_OPTION"
    read -rp "$W_CHOICE: " option
  done

  [[ "$option" =~ ^(4|5)$ ]] && clear

  case "$option" in
    1)
      add_new_wg_service
    ;;
    2)
      remove_wg_service
    ;;
    3)
      proxy_management
    ;;
    4)
      show_podman_logs
    ;;
    5)
      select_menu_option
    ;;
  esac
}

show_systemctl_status() {
  systemctl status wg-easy-breezy --no-pager -l
  press_any_side_to_open_menu
}

press_any_side_to_open_menu() {
  local type="${1:-main}"

  echomsg "------------------------------------------------"
  read -n1 -r -p "$W_PRESS_ANY_KEY_TO_OPEN_MENU"

  case "$type" in
    "main")
      select_menu_option
    ;;
    "containers")
      select_containers_menu
    ;;
    "domain")
      select_domain_option
    ;;
  esac
}

select_menu_option() {
  clear
  show_header

  local menu

  if is_all_ok_services; then
    menu+="$W_ACTIVE_SERVICE\n"
    menu+="$W_SELECT_OPTION\n"
    menu+="$W_STOP\n"
  else
    menu+="$W_SERVICE_NOT_ACTIVE\n"
    menu+="$W_SELECT_OPTION\n"
    menu+="$W_LAUNCH\n"
  fi

  menu+="$W_MAIN_MENU"

  echo -e "$menu"

  read -rp "$W_CHOICE: " option
  until [[ "$option" =~ ^[1-8]$ ]]; do
    echoerr "$W_INCORRECT_OPTION"
    read -rp "$W_CHOICE: " option
  done

  [[ "$option" =~ ^[1-8]$ ]] && clear

  case "$option" in
    1)
      switch_active_services
    ;;
    2)
      restart_services
    ;;
    3)
      select_containers_menu
    ;;
    4)
      select_domain_option
    ;;
    5)
      change_password
    ;;
    6)
      show_systemctl_status
    ;;
    7)
      remove_services
    ;;
    8)
      exit 0
    ;;
  esac
}

install() {
  clear
  check_root
  check_shell
  check_kernel
  check_os
  check_os_ver
  check_container

  show_header
  read -n1 -r -p "$W_PRESS_ANY_KEY_TO_INSTALL"

  if [[ -f "$path_translation_file" ]]; then
    cp "$path_translation_file" "/opt/.translation.tmp"
  fi
  remove_install

  install_pkgs

  select_install_mode

  mkdir -p "$path_data_dir"
  mkdir -p "$(dirname "$path_script")"
  mkdir -p "$(dirname "$path_env_file")"
  if [[ -f "/opt/.translation.tmp" ]]; then
    mv "/opt/.translation.tmp" "$path_translation_file"
  fi
  {
    echo "WG_DEFAULT_DNS=1.1.1.1"
    echo "UI_TRAFFIC_STATS=true"
    echo "WG_PERSISTENT_KEEPALIVE=25"
  } >> "$path_env_file"

  input_tag
  input_domain
  input_email
  input_xray_link
  input_port
  input_address
  input_password

  find_optimal_wg_mtu
  create_iptables_scripts
  create_services_config
  create_sysctl_config
  create_systemd_unit
  start_services
  
  echo -e "\n\033[1;32m$W_INSTALL_COMPLETED\033[0m"
  echo -e "\033[0;36m$W_DIRECTORY_PROGRAM:\033[1;32m $path_data_dir\033[0m"
  echo -e "\033[0;36m$W_WEB_INTERFACE:\033[1;32m $link_ui\033[0m\n"

  mv "$(realpath "$0")" "$path_script"
  chmod +x "$path_script"
  ln -s "$path_script" "$path_script_link"

  press_any_side_to_open_menu
}

load_env
load_uv_env
load_translation

if [[ -f "$path_script" ]]; then
  select_menu_option
else
  install
fi